<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
	</configSections>
	<appSettings>
		<!-- The URI at which this service will be hosted. -->
		<!-- NOTE: Should be in the format net.tcp://HOSTNAME:PORT/SERVICENAME -->
		<add key="RecordingManagerHost.serviceUri" value="net.tcp://localhost:9001/iceRecordingManager"/>
		
		<!-- The certificate serial number of the certifiacte used by the service to identify this server for server authentication -->
		<!-- NOTE: If specified then it will use secure channels, if not then it will use unsecure channels -->
		<add key="RecordingManagerHost.hostCertSerial" value=""/>
		
		<!-- The shared password used to verify the client is allowed to connect to the server. -->
		<!-- IMPORTANT: A shared password can only be used on secured connection. If the connection is unsecure then the shared password will be ignored. -->
		<!-- NOTE: If the server is setup with a sharedPassword, then so should the client. -->
		<add key="RecordingManagerHost.sharedPassword" value=""/>

		<!-- The connection string for the ice database. -->
		<!-- NOTE: The password will be encrypted ASAP. -->
		<add key="RecordingManager.iceDBConnectionString" value="Data Source=localhost;Initial Catalog=iceSwitch11001;Persist Security Info=True;User Id=sa;Password=ctt^sql^288"/>

		<!-- The URI of the iceIMRService the RecordingManager will work with. -->
		<!-- NOTE: Should be in the format net.tcp://HOSTNAME:PORT/SERVICENAME -->
		<!-- NOTE: Must use FQDN that matches the certificate being offered by the iceIMRService -->
		<add key="RecordingManager.iceIMRServiceAddress" value="net.tcp://localhost:8401/iceIMRService"/>

		<!-- The SwitchId of the switch that the RecordingManager is responsible for. -->
		<add key="RecordingManager.SwitchId" value="11001"/>

		<!-- When the recording manager looses connection with iceIMRService and can't query for privacy, it will use this value. -->
		<!-- NOTE: This must be set to true for PCI compliance. -->
		<add key="RecordingManager.imrFaultedDefaultPrivacy" value="false"/>

		<!-- If we should delete recordings on a fault or if we should keep them. -->
		<add key="RecordingManager.discardRecOnFault" value="false"/>
		
		<!-- The time in ms that the service will wait before refreshing the cache if nothing has triggered a change. -->
		<add key="RecordingManager.DBCacheTime" value="60000"/>

		<!-- The time in ms that the service will wait before attempting to reconnect to the iceIMR service after a failure. -->
		<add key="RecordingManager.iceIMRRetryTimeout" value="10000"/>

		<!-- The username to use when connecting to iceIMRService -->
		<add key="RecordingManager.iceUsername" value="9999"/>
		
		<!-- The encrypted ice password to use when connecting to iceIMRService -->
		<add key="RecordingManager.icePassword" value="349fd837e8657915"/>

		<!-- The interval in between transfer attemps in ms -->
		<add key="RecordingManager.TransferRetryInterval" value="10000"/>
		
		<!-- The number of times a transfer will retry before asking for new transfer parameter -->
		<add key="RecordingManager.TransferNumRetries" value="3"/>

		<!-- The timeout interval in ms between registration verification attempts -->
		<!-- WARNING: Make sure this value is at least around three times greater than the UCMARecorder.registrationIdleTimeout -->
		<add key="RecordingManager.recorderRegTimeout" value="100000"/>

		<!-- If we should delete files using sdelete. -->
		<add key="RecordingManager.secureDelete" value="false"/>

		<!-- If we should only record part of the call when an agent is on the call. -->
		<!-- This does the equivalent of turning on recording privacy for the recorder. -->
		<add key="RecordingManager.onlyRecordAgents" value="false"/>
	</appSettings>
	<entityFramework>
		<defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
			<parameters>
				<parameter value="v11.0"/>
			</parameters>
		</defaultConnectionFactory>
		<providers>
			<provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer"/>
		</providers>
	</entityFramework>
	<startup useLegacyV2RuntimeActivationPolicy="true">
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7"/>
	</startup>
</configuration>